# coding: utf-8

"""
    ComicKing

    PHP Symfony-based comic catalog full-stack.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Comic(BaseModel):
    """
    Comic
    """ # noqa: E501
    created_at: datetime = Field(alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    code: StrictStr
    published_from: Optional[datetime] = Field(default=None, alias="publishedFrom")
    published_to: Optional[datetime] = Field(default=None, alias="publishedTo")
    total_chapter: Optional[StrictInt] = Field(default=None, alias="totalChapter")
    total_volume: Optional[StrictInt] = Field(default=None, alias="totalVolume")
    nsfw: Optional[StrictInt] = None
    nsfl: Optional[StrictInt] = None
    title_count: StrictInt = Field(alias="titleCount")
    cover_count: StrictInt = Field(alias="coverCount")
    synopsis_count: StrictInt = Field(alias="synopsisCount")
    character_count: StrictInt = Field(alias="characterCount")
    author_count: StrictInt = Field(alias="authorCount")
    serialization_count: StrictInt = Field(alias="serializationCount")
    external_count: StrictInt = Field(alias="externalCount")
    chapter_count: StrictInt = Field(alias="chapterCount")
    volume_count: StrictInt = Field(alias="volumeCount")
    category_count: StrictInt = Field(alias="categoryCount")
    tag_count: StrictInt = Field(alias="tagCount")
    relation_count: StrictInt = Field(alias="relationCount")
    __properties: ClassVar[List[str]] = ["createdAt", "updatedAt", "code", "publishedFrom", "publishedTo", "totalChapter", "totalVolume", "nsfw", "nsfl", "titleCount", "coverCount", "synopsisCount", "characterCount", "authorCount", "serializationCount", "externalCount", "chapterCount", "volumeCount", "categoryCount", "tagCount", "relationCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Comic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updatedAt'] = None

        # set to None if published_from (nullable) is None
        # and model_fields_set contains the field
        if self.published_from is None and "published_from" in self.model_fields_set:
            _dict['publishedFrom'] = None

        # set to None if published_to (nullable) is None
        # and model_fields_set contains the field
        if self.published_to is None and "published_to" in self.model_fields_set:
            _dict['publishedTo'] = None

        # set to None if total_chapter (nullable) is None
        # and model_fields_set contains the field
        if self.total_chapter is None and "total_chapter" in self.model_fields_set:
            _dict['totalChapter'] = None

        # set to None if total_volume (nullable) is None
        # and model_fields_set contains the field
        if self.total_volume is None and "total_volume" in self.model_fields_set:
            _dict['totalVolume'] = None

        # set to None if nsfw (nullable) is None
        # and model_fields_set contains the field
        if self.nsfw is None and "nsfw" in self.model_fields_set:
            _dict['nsfw'] = None

        # set to None if nsfl (nullable) is None
        # and model_fields_set contains the field
        if self.nsfl is None and "nsfl" in self.model_fields_set:
            _dict['nsfl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Comic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "code": obj.get("code"),
            "publishedFrom": obj.get("publishedFrom"),
            "publishedTo": obj.get("publishedTo"),
            "totalChapter": obj.get("totalChapter"),
            "totalVolume": obj.get("totalVolume"),
            "nsfw": obj.get("nsfw"),
            "nsfl": obj.get("nsfl"),
            "titleCount": obj.get("titleCount"),
            "coverCount": obj.get("coverCount"),
            "synopsisCount": obj.get("synopsisCount"),
            "characterCount": obj.get("characterCount"),
            "authorCount": obj.get("authorCount"),
            "serializationCount": obj.get("serializationCount"),
            "externalCount": obj.get("externalCount"),
            "chapterCount": obj.get("chapterCount"),
            "volumeCount": obj.get("volumeCount"),
            "categoryCount": obj.get("categoryCount"),
            "tagCount": obj.get("tagCount"),
            "relationCount": obj.get("relationCount")
        })
        return _obj


